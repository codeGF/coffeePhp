<?php (defined("SYSTEM_ROUTER_RUN") && SYSTEM_ROUTER_RUN) or die; class PrivateException extends Exception { protected $description_; private $_errorCnt = null; private $_errorHtml = null; public function __construct($array = "", $description = "") { parent::__construct($this->_getErrorMessage($array), 0); $this->description = $description; if ($this->_errorCnt == null) { $this->_errorCnt = file_get_contents(sprintf("%s/system/error.html", ServiceManager::get("SYSTEMCONF@SYSTEM_DISPLAY_PATH"))); } } private function _getErrorMessage($array) { if (is_array($array) == true) { $error = ServiceManager::get("ERRORCODE@{$array["code"]}"); if ($error) { return str_replace('{e}', $array["message"], $error); }else { return $array["message"]; } }else { return $array; } } public function getDescription() { return $this->description_; } public function __getTraceAsString() { return $this->getTraceAsString(); } public function show() { $this->errorSystem_(); if (ServiceManager::get("SYSTEMCONF@SYSTEM_ERROR_PROMPT") == true) { $this->errorSystem_(); }else { $this->toEmail(); $this->errorFriendly_(); } die($this->_errorHtml); } protected function errorSystem_() { $list1 = null; $list2 = null; $list1 .= "<li>".htmlspecialchars($this->getMessage())."</li>"; $list1 .= "<li>Server PHP Version: ".htmlspecialchars(phpversion())."</li>"; $list1 .= "<li>Error Date: ".date("Y-m-d H:i:s")."</li>"; if (isset($_SERVER ['REQUEST_URI'])) { $list1 .= "<li>Request Uri: ".htmlspecialchars($_SERVER ['REQUEST_URI'])."</li>"; } if (isset($_SERVER ['HTTP_REFERER'])) { $list1 .= "<li>Http Referer: ".htmlspecialchars($_SERVER ['HTTP_REFERER'])."</li>"; } $arr = explode("#", trim(htmlspecialchars($this->__getTraceAsString()), "#")); foreach ($arr as $v) { $list2 .= "<li>{$v}</li>"; } $this->_errorHtml = str_replace(array("{{list1}}", "{{list2}}"), array($list1, $list2), $this->_errorCnt); return; } private function toEmail() { if (ServiceManager::get("SYSTEM_RUN_ERROR_EMAIL") == false) { include sprintf("%s/emailer/emailer.class.php", ServiceManager::get("SYSTEMCONF@SYSTEM_IMPORT_PATH")); ServiceManager::set("SYSTEM_RUN_ERROR_EMAIL", true); } $emailObj = new Emailer((array)ServiceManager::get("SYSTEMCONF@SYSTEM_ERROR_TO_EMAIL"), array("SYSTEM_RUN_ERROR", $this->_errorHtml), true); $emailObj->email(); return; } protected function errorFriendly_() { $this->_errorHtml = str_replace(array("{{list1}}", "{{list2}}"), array("<li>Error Date: ".date("Y-m-d H:i:s")."</li>", ":("), $this->_errorCnt); return; } }(defined("SYSTEM_ROUTER_RUN") && SYSTEM_ROUTER_RUN) or die; function import($name) { return require_cache(sprintf("%s/%s", ServiceManager::get("SYSTEMCONF@SYSTEM_IMPORT_PATH"), $name)); } function helpers($name) { return require_cache(sprintf("%s/%s", ServiceManager::get("SYSTEMCONF@SYSTEM_HELPERS_PATH"), $name)); } function require_cache($filename) { $result = ServiceManager::get($filename); if ($result == false) { if (file_exists($filename)) { $result = require($filename); ServiceManager::set($filename, $result); }else { throw new PrivateException(array("message"=> $filename, "code"=> 11128)); die; } } return $result; } function Exception(Exception $e) { if ($e instanceof PrivateException) { $e->show (); die; } } function handleError($errorNo, $message, $filename, $lineNo) { if (ServiceManager::get("SYSTEMCONF@SYSTEM_ERROR_PROMPT") != false) { $type = "[ERROR]"; switch ($errorNo) { case 2 : $type = "[E_WARNING]"; break; case 8 : $type = "[E_NOTICE]"; break; } throw new PrivateException(array("message"=> sprintf("%s in file %s (line: %s) %s", $type, $filename, $lineNo, $message), "code"=> "")); die; } } set_exception_handler('exception'); set_error_handler('handleError', E_ALL);(defined("SYSTEM_ROUTER_RUN") && SYSTEM_ROUTER_RUN) or die; class System { public static function header($info) { if (is_array($info) == true) { foreach ($info as $v) { header($v); } }else { header($info); } return; } public static function hash($key) { return md5($key); } public static function quit($str=false) { exit($str); } public static function error($code, $message) { throw new PrivateException(array("message"=>$message, "code"=>$code), 0); self::quit(); } public static function printr($obj) { print("<pre>"); print_r($obj); print("</pre>"); return; } public static function dump($var, $echo=true, $label=null, $strict=true) { $label = ($label === null) ? "" : rtrim($label).""; if ($strict == false) { if (ini_get("html_errors")) { $output = print_r($var, true); $output = "<pre>" . $label . htmlspecialchars($output, ENT_QUOTES) . "</pre>"; }else { $output = $label . print_r($var, true); } }else { ob_start(); var_dump($var); $output = ob_get_clean(); if (!extension_loaded("xdebug")) { $output = preg_replace("/\]\=\>\n(\s+)/m", "] => ", $output); $output = "<pre>" . $label . htmlspecialchars($output, ENT_QUOTES) . "</pre>"; } } if ($echo == true) { print($output); return false; }else { return $output; } } }(defined("SYSTEM_ROUTER_RUN") && SYSTEM_ROUTER_RUN) or die; class Auto { public function __get($name) { if (ServiceManager::get($name) == false) { ServiceManager::set($name, $this->_main($name)); } return ServiceManager::get($name); } private function _main($name) { $name = sprintf("%s%s", __CLASS__, strtolower($name)); if (class_exists($name)) { return new $name; } System::error(11117, $name); } } class AutoService { public function __get($name) { if (ServiceManager::get(sprintf("%s@%s", __CLASS__, $name)) == false) { $mvc = sprintf("%s/%s.class.php", ServiceManager::get("SYSTEMCONF@APP_SERVICE_PATH"), $name); require_cache($mvc); if (class_exists($name)) { ServiceManager::set(sprintf("%s@%s", __CLASS__, $name), new $name); }else { System::error(11117, $name); } } return ServiceManager::get(sprintf("%s@%s", __CLASS__, $name)); } } class AutoExt { public function __get($name) { if (ServiceManager::get(sprintf("%s@%s", __CLASS__, $name)) == false) { $mvc = sprintf("%s/%s.class.php", ServiceManager::get("SYSTEMCONF@APP_EXT_PATH"), $name); require_cache($mvc); if (class_exists($name)) { ServiceManager::set(sprintf("%s@%s", __CLASS__, $name), new $name); }else { System::error(11117, $name); } } return ServiceManager::get(sprintf("%s@%s", __CLASS__, $name)); } } class AutoConfig { public function __get($name) { if (ServiceManager::get(sprintf("%s@%s", __CLASS__, $name)) == false) { $arr = require_cache(ServiceManager::get("SYSTEMCONF@APP_CONFIG_PATH")."/".$name.".php"); ServiceManager::set(sprintf("%s@%s", __CLASS__, $name), is_array($arr)? (object)$arr : false); } return ServiceManager::get(sprintf("%s@%s", __CLASS__, $name)); } } class AutoModel { public function __construct() { require_cache(sprintf("%s/db.php", ServiceManager::get("SYSTEMCONF@SYSTEM_CONF_PATH"))); require_cache(sprintf("%s/ezsql/shared/ez_sql_core.php", ServiceManager::get("SYSTEMCONF@SYSTEM_IMPORT_PATH"))); require_cache(sprintf("%s/datadriven.class.php", ServiceManager::get("SYSTEMCONF@SYSTEM_CORE_PATH"))); require_cache(sprintf("%s/model.class.php", ServiceManager::get("SYSTEMCONF@SYSTEM_CORE_PATH"))); } public function __get($name) { if (ServiceManager::get(sprintf("%s@%s", __CLASS__, $name)) == false) { $file = sprintf("%s/%s.class.php", ServiceManager::get("SYSTEMCONF@APP_MODEL_PATH"), $name); require_cache($file); if (class_exists($name)) { ServiceManager::set(sprintf("%s@%s", __CLASS__, $name), new $name); }else { System::error(11117, $name); } } return ServiceManager::get(sprintf("%s@%s", __CLASS__, $name)); } } class AutoController { public function __get($name) { if (ServiceManager::get(sprintf("%s@%s", __CLASS__, $name)) == false) { $file = sprintf("%s/%s.class.php", ServiceManager::get("SYSTEMCONF@APP_CONTROLLER_PATH"), $name); require_cache($file); if (class_exists($name)) { ServiceManager::set(sprintf("%s@%s", __CLASS__, $name), new $name); }else { System::error(11117, $name); } } return ServiceManager::get(sprintf("%s@%s", __CLASS__, $name)); } } class AutoHelpers { public function __get($name) { if (ServiceManager::get(sprintf("%s@%s", __CLASS__, $name)) == false) { $file = sprintf("%s/%s.class.php", ServiceManager::get("SYSTEMCONF@SYSTEM_HELPERS_PATH"), $name); if (file_exists($file)) { require_cache($file); }else { System::error(11127, $name); } if (class_exists($name)) { ServiceManager::set(sprintf("%s@%s", __CLASS__, $name), new $name); }else { System::error(11117, $name); } } return ServiceManager::get(sprintf("%s@%s", __CLASS__, $name)); } } class AutoImport { public function load($name) { import($name); return; } }(defined("SYSTEM_ROUTER_RUN") && SYSTEM_ROUTER_RUN) or die; abstract class Base { protected $auto_ = null; protected $system_ = array(); public function __construct() { $this->system_ = (object)array(); $this->_auto(); } final private function _auto() { if (ServiceManager::get("base@construct") == false) { $this->system_->date = ServiceManager::get("SYSTEMCONF@SYSTEM_TIME"); $this->auto_ = new Auto; ServiceManager::set("base@construct@auto_", $this->auto_); ServiceManager::set("base@construct@base_", $this->system_); ServiceManager::set("base@construct", true); }else { $this->auto_ = ServiceManager::get("base@construct@auto_"); $this->system_ = ServiceManager::get("base@construct@base_"); } return; } public function __set($name, $value) { System::error(11120, $name); return; } public function __get($name) { System::error(11121, $name); return; } public function __call($name, $arguments) { System::error(11122, $name); return; } }(defined("SYSTEM_ROUTER_RUN") && SYSTEM_ROUTER_RUN) or die; abstract class Controller extends Base { protected $view_ = array(); public function __construct() { parent::__construct(); $this->view_ = (object)array(); } final protected function display_($name="") { $viewfile = sprintf ( "%s/%s/%s%s", ServiceManager::get("SYSTEMCONF@APP_VIEW_PATH"), ServiceManager::get("router@appController"), empty($name) ? ServiceManager::get("router@appFunction") : $name, ServiceManager::get("SYSTEMCONF@APP_DISPLAY_NAME") ); if (file_exists($viewfile)) { extract((array)$this->view_); require $viewfile; }else { System::error(11119, $viewfile); } return; } }(defined("SYSTEM_ROUTER_RUN") && SYSTEM_ROUTER_RUN) or die; $conf = array(); $conf[11111] = "ezsql扩展不存在该类型文件配置，请您检查core/model.class.php 的 loadezsql方法"; $conf[11112] = "dbconf配置文件中不存在您指定的数据资源类型{e}"; $conf[11113] = "您调用的扩展不存在"; $conf[11114] = "不可以重复设置属性{e}"; $conf[11115] = "您访问了不存在的属性{e}"; $conf[11116] = "您访问了不存在的方法{e}"; $conf[11117] = "您调用了不存在的{e}类"; $conf[11118] = "加载{e}.php文件失败，请您确认文件是否存在"; $conf[11119] = "视图文件{e}不存在"; $conf[11120] = "不可以设置属性{e}"; $conf[11121] = "不可以获取属性{e}"; $conf[11122] = "您访问了不存在方法{e}"; $conf[11123] = "控制参数{e}不能为空"; $conf[11124] = "路径{e}不可写，权限不足"; $conf[11125] = "{e}参数不能为空，执行操作需提前指定"; $conf[11126] = "参数不能为空"; $conf[11127] = "{e}文件不存在"; $conf[11128] = "require_cache函数调用文件{e}错误"; $conf[11129] = "<!-- :( System memory size exceeds limit %sMB -->"; $conf[11130] = "<!-- :) Within the range of normal memory %sMB -->"; $conf[11131] = "{e}目录不可写"; $conf[11132] = "mb_convert_encoding和iconv俩个方法无法再您系统中运行"; $conf[11133] = "您设置的钩子文件{e}不存在"; $conf[11134] = "您设置的钩子类{e}不存在"; $conf[11135] = "您设置的钩子方法{e}不存在"; $conf[11136] = "autoload只支持system和app俩个应用钩子，您调用的{e}不存在"; $conf[11137] = "系统不支持eval函数，钩子机制无法使用"; $conf[11138] = "写入文件{e}失败"; $conf[11139] = "加载配置文件函数{e}出错"; ServiceManager::set("ERRORCODE", $conf); unset($conf);(defined("SYSTEM_ROUTER_RUN") && SYSTEM_ROUTER_RUN) or die; class Hook extends Base { private $_hookConf = array(); private $_hookFile = null; private $_controller = null; private $_function = null; public $excision = array(".", "@"); public function __construct() { parent::__construct(); $this->_hookFile = ServiceManager::get("SYSTEMCONF@APP_HOOK_CONF"); if (file_exists($this->_hookFile) == true) { $this->_hookConf = require_cache($this->_hookFile); if ($this->_hookConf["en"] == true) { $this->_construct(); $this->_function(); } } } private function _eval($str) { $data = array(); $tmp = null; preg_match("/\[.*\]/", $str, $data); $str = sprintf("\$this->%s", str_replace($this->excision, "->", preg_replace("/\[.*\]/", "", $str))); if ($data != false) { $data = explode(",", str_replace(array("[", "]"), "", $data[0])); foreach ($data as $v) { $tmp .= sprintf("'%s',", $v); } $tmp = trim($tmp, ","); } return eval(sprintf("%s(%s);", $str, $tmp)); } private function _construct() { $this->_controller = strtolower(ServiceManager::get("router@appController")); $this->_function = strtolower(ServiceManager::get("router@appFunction")); if (array_key_exists($this->_controller, $this->_hookConf["conf"]) == true) { if (!empty($this->_hookConf["conf"][$this->_controller]["__construct"])) { if (is_array($this->_hookConf["conf"][$this->_controller]["__construct"]) == true) { foreach ($this->_hookConf["conf"][$this->_controller]["__construct"] as $fun) { $this->_eval($fun); } }else { $this->_eval($this->_hookConf["conf"][$this->_controller]["__construct"]); } } } return; } private function _function() { if (!empty($this->_hookConf["conf"][$this->_controller][$this->_function])) { if (is_array($this->_hookConf["conf"][$this->_controller][$this->_function])) { foreach ($this->_hookConf["conf"][$this->_controller][$this->_function] as $v) { $this->_eval($v); } }else { $this->_eval($this->_hookConf["conf"][$this->_controller][$this->_function]); } } return; } }(defined("SYSTEM_ROUTER_RUN") && SYSTEM_ROUTER_RUN) or die; class Router extends Base { private $_router = array(); private $_apprunk = ""; private $_appFunction = ""; private $_appController = ""; private $_pgData = array(); private $_routerStr = ""; public function __construct() { parent::__construct(); $this->_apprunk = ServiceManager::get("SYSTEMCONF@SYSTEM_APP_RUN_K"); } private function _getRequest() { $apprunk = $this->_apprunk; $this->_routerStr = $this->auto_->helpers->postget->$apprunk; if (empty($this->_routerStr)) { defined("MAIN") ? $this->_routerStr = MAIN : $this->_httpStatus(); } $this->_pgData = array_merge ( $this->auto_->helpers->postget->post, $this->auto_->helpers->postget->get ); unset($this->_pgData[$this->_apprunk]); $this->_pgData = array_values($this->_pgData); return; } private function _getControllerFunction() { $Delimiter = preg_replace("/[0-9a-zA-Z]/", "", $this->_routerStr); if ($Delimiter) { $this->_router = explode($Delimiter, $this->_routerStr); }else { $this->_router[0] = $this->_routerStr; } if (empty($this->_router[1])) { $this->_router[1] = ServiceManager::get("SYSTEMCONF@SYSTEM_APP_FUN_MAIN"); } ServiceManager::set("router", array("appController"=>$this->_router[0], "appFunction"=>$this->_router[1])); $this->_appController = $this->_router[0]; $this->_appFunction = $this->_router[1]; return; } private function _loadController() { $result = false; $appFile = sprintf("%s/%s.class.php", ServiceManager::get("SYSTEMCONF@APP_CONTROLLER_PATH"), $this->_appController); if (file_exists($appFile)) { require $appFile; $ReflectionClass = new ReflectionClass($this->_appController); if ($ReflectionClass->hasMethod($this->_appFunction)) { new Hook; $CTL = $ReflectionClass->newInstance(); call_user_func_array(array($CTL, $this->_appFunction), $this->_pgData); $result = true; } } if ($result == false) { $this->_httpStatus(); } return; } private function _registry() { $file = ServiceManager::get("SYSTEMCONF@APP_REGISTRY_CONF"); if (file_exists($file)) { $data = require_cache($file); if ($data["is"] == true) { if (in_array($this->_appController, $data["list"]) == false) { $this->_httpStatus(); } } } return; } private function _httpStatus() { $this->auto_->helpers->url->send_http_status(404); $this->auto_->helpers->display->tmpView("system/404.html"); System::quit(); } public static function run() { $router = new Router; $router->_getRequest(); $router->_getControllerFunction(); $router->_registry(); $router->_loadController(); return; } }(defined("SYSTEM_ROUTER_RUN") && SYSTEM_ROUTER_RUN) or die; abstract class App extends Base { public function __construct() { parent::__construct(); } } ?>